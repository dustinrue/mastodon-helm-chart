{{- if .Values.dbutils.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mastodon.fullname" . }}-dbutils
  labels:
    {{- include "mastodon.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "mastodon.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        # roll the pods to pick up any db migrations or other changes
        {{- include "mastodon.rollingPodAnnotations" . | nindent 8 }}
      labels:
        {{- include "mastodon.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mastodon.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-dbutils
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          # image: "{{ .Values.image.repository }}:v{{ .Values.image.tag | default .Chart.AppVersion }}"
          image: postgres:15-alpine
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh"]
          stdin: true
          tty: true
          envFrom:
            - configMapRef:
                name: {{ include "mastodon.fullname" . }}-env
            - secretRef:
                name: {{ template "mastodon.secretName" . }}
          env:
            - name: "DB_PASS"
              valueFrom:
                secretKeyRef:
                  name: {{ template "mastodon.postgresql.secretName" . }}
                  key: DB_PASS
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ template "mastodon.redis.secretName" . }}
                  key: REDIS_PASS
            {{- if (and (eq .Values.mastodon.storage.type "s3" ) .Values.mastodon.storage.s3.existingSecret) }}
            - name: "AWS_SECRET_ACCESS_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mastodon.storage.s3.existingSecret }}
                  key: AWS_SECRET_ACCESS_KEY
            - name: "AWS_ACCESS_KEY_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mastodon.storage.s3.existingSecret }}
                  key: AWS_ACCESS_KEY_ID
            {{- end }}
          resources:
            {{- toYaml .Values.dbutils.resources | nindent 12 }}
      {{- if (and .Values.mastodon.cron.databaseBackup.enabled .Values.mastodon.cron.databaseBackup.volumeClaimName) }}
          volumeMounts:
            - name: database-backup-volume
              mountPath: /var/database-backups
      volumes:
        - name: database-backup-volume
          persistentVolumeClaim:
            claimName: {{ .Values.mastodon.cron.databaseBackup.volumeClaimName }}
      {{- end }}
      {{- with .Values.dbutils.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dbutils.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dbutils.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
