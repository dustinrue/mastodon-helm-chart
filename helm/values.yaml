# Default values for mastodon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: tootsuite/mastodon
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: domain.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

##
# Setup global Mastodon environment values. Review the Secrets section of this page https://docs.joinmastodon.org/admin/config/ for more information about each value
# 
# If you have Docker installed, you can generate SECRET_KEY_BASE, OTP_SECRET, 
# VAPID_PRIVATE_KEY and VAPID_PUBLIC_KEY using the following commands:
# SECRET_KEY_BASE - echo "SECRET_KEY_BASE=$(docker run --rm -ti tootsuite/mastodon:latest bundle exec rake secret)"
# OTP_SECRET - echo "OTP_SECRET=$(docker run --rm -ti tootsuite/mastodon:latest bundle exec rake secret)"
# VAPID_PRIVATE_KEY and VAPID_PUBLIC_KEY - docker run --rm -ti tootsuite/mastodon:latest bundle exec rake mastodon:webpush:generate_vapid_key
# Update the values below and note that you cannot change though without causing trouble for users.
mastodon:
  local_domain: mastodon.local
  # Use of WEB_DOMAIN requires careful consideration: https://docs.joinmastodon.org/admin/config/#federation
  # You must redirect the path LOCAL_DOMAIN/.well-known/ to WEB_DOMAIN/.well-known/ as described
  # web_domain: mastodon.example.com
  # If set to true, the frontpage of your Mastodon server will always redirect to the first profile in the database and registrations will be disabled.
  singleUserMode: false
  cron:
    # run `tootctl media remove` every week
    removeMedia:
      enabled: true
      schedule: "0 0 * * 0"
  secrets:
    # name of an existing secret that will contain the following values
    #   SECRET_KEY_BASE
    #   OTP_SECRET
    #   VAPID_PRIVATE_KEY
    #   VAPID_PUBLIC_KEY
    existingSecret: ""
    secret_key_base: ""
    otp_secret: ""
    vapid:
      private_key: ""
      public_key:  ""
  storage:
    type: "s3" # one of s3, emptyDir or csi
    s3:
      access_key: ""
      access_secret: ""
      # Specify the name of an existing secret with keys 
      #   AWS_ACCESS_KEY_ID
      #   AWS_SECRET_ACCESS_KEY
      existingSecret: ""
      bucket: ""
      endpoint: https://us-east-1.linodeobjects.com
      hostname: us-east-1.linodeobjects.com
      region: ""
      # If you have a caching proxy, enter its base URL here.
      alias_host: ""
      permission: "public" # public or private. Use private for Cloudflare R2
    csi:
      assets:
        # ReadWriteOnce is more widely supported than ReadWriteMany, but limits
        # scalability, since it requires the Rails and Sidekiq pods to run on the
        # same node.
        accessMode: ReadWriteOnce
        storageClass: "" # set to the desired storage class
        resources:
          requests:
            storage: 10Gi
      system:
        accessMode: ReadWriteOnce
        storageClass: "" # set to the desired storage class
        resources:
          requests:
            storage: 100Gi
  postgresql:
    existingSecret: ""
    host: ""
    database: ""
    port: 5432
    auth:
      username: ""
      password: ""
  redis:
    existingSecret: ""
    host: ""
    database: "" # what database, 0, 1, etc
    port: 6379
    auth:
      password: ""
  elasticsearch:
    enabled: false
    existingSecret: ""
    host: "" # setting a host value will enable Elasticsearch support
    port: 9200
    # auth - this should be added, ES does support auth or could have a proxy in front of it
  

  smtp:
    auth_method: plain
    ca_file: /etc/ssl/certs/ca-certificates.crt
    delivery_method: smtp
    domain:
    enable_starttls: 'auto'
    from_address: notifications@example.com
    openssl_verify_mode: peer
    port: 587
    reply_to:
    server: smtp.mailgun.org
    tls: false
    login:
    password:
    # you can also specify the name of an existing Secret
    # with the keys login and password
    existingSecret:
  metrics:
    statsd:
      # Enable statsd publishing via STATSD_ADDR environment variable
      address: ""

web:
  port: 3000
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

sidekiq:
  concurrency: 25
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

streaming:
  port: 4000
  # this should be set manually since os.cpus() returns the number of CPUs on
  # the node running the pod, which is unrelated to the resources allocated to
  # the pod by k8s
  workers: 1
  # The base url for streaming can be set if the streaming API is deployed to
  # a different domain/subdomain.
  # base_url: wws://streaming.example.com
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

externalAuth:
  oidc:
    # OpenID Connect support is proposed in PR #16221 and awaiting merge.
    enabled: false
    # display_name: "example-label"
    # issuer: https://login.example.space/auth/realms/example-space
    # discovery: true
    # scope: "openid,profile"
    # uid_field: uid
    # client_id: mastodon
    # client_secret: SECRETKEY
    # redirect_uri: https://example.com/auth/auth/openid_connect/callback
    # assume_email_is_verified: true
    # client_auth_method:
    # response_type:
    # response_mode:
    # display:
    # prompt:
    # send_nonce:
    # send_scope_to_token_endpoint:
    # idp_logout_redirect_uri:
    # http_scheme:
    # host:
    # port:
    # jwks_uri:
    # auth_endpoint:
    # token_endpoint:
    # user_info_endpoint:
    # end_session_endpoint:
  saml:
    enabled: false
    # acs_url: http://mastodon.example.com/auth/auth/saml/callback
    # issuer: mastodon
    # idp_sso_target_url: https://login.example.com/auth/realms/example/protocol/saml
    # idp_cert: '-----BEGIN CERTIFICATE-----[your_cert_content]-----END CERTIFICATE-----'
    # idp_cert_fingerprint:
    # name_identifier_format: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified
    # cert:
    # private_key:
    # want_assertion_signed: true
    # want_assertion_encrypted: true
    # assume_email_is_verified: true
    # uid_attribute: "urn:oid:0.9.2342.19200300.100.1.1"
    # attributes_statements:
    #   uid: "urn:oid:0.9.2342.19200300.100.1.1"
    #   email: "urn:oid:1.3.6.1.4.1.5923.1.1.1.6"
    #   full_name: "urn:oid:2.16.840.1.113730.3.1.241"
    #   first_name: "urn:oid:2.5.4.42"
    #   last_name: "urn:oid:2.5.4.4"
    #   verified:
    #   verified_email:
  oauth_global:
    # Force redirect local login to CAS. Does not function with SAML or LDAP.
    oauth_redirect_at_sign_in: false
  cas:
    enabled: false
    # url: https://sso.myserver.com
    # host: sso.myserver.com
    # port: 443
    # ssl: true
    # validate_url:
    # callback_url:
    # logout_url:
    # login_url:
    # uid_field: 'user'
    # ca_path:
    # disable_ssl_verification: false
    # assume_email_is_verified: true
    # keys:
    #   uid: 'user'
    #   name: 'name'
    #   email: 'email'
    #   nickname: 'nickname'
    #   first_name: 'firstname'
    #   last_name: 'lastname'
    #   location: 'location'
    #   image: 'image'
    #   phone: 'phone'
  pam:
    enabled: false
    # email_domain: example.com
    # default_service: rpam
    # controlled_service: rpam
  ldap:
    enabled: false
    # host: myservice.namespace.svc
    # port: 389
    # method: simple_tls
    # base:
    # bind_on:
    # password:
    # uid: cn
    # mail: mail
    # search_filter: "(|(%{uid}=%{email})(%{mail}=%{email}))"
    # uid_conversion:
    #   enabled: true
    #   search: "., -"
    #   replace: _
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
